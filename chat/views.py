import json
import datetime


from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.views import LoginView, LogoutView
from django.views.generic import TemplateView
from django.views.generic.edit import FormView
from django.contrib.auth.forms import UserCreationForm
from django.urls import reverse_lazy
from django.contrib import messages
from django.shortcuts import redirect
from django.contrib.auth import login

from .forms import FicheConsultationForm


# Vue d'inscription
class RegisterView(FormView):
    template_name = 'chat/register.html'
    form_class = UserCreationForm
    success_url = reverse_lazy('login')

    def form_valid(self, form):
        user = form.save()
        login(self.request, user)  # Connexion automatique apr√®s l'inscription
        messages.success(self.request, "Inscription r√©ussie ! Vous √™tes maintenant connect√©.")
        return redirect('home')  # Redirige vers la page d'accueil

    def form_invalid(self, form):
        messages.error(self.request, "Une erreur est survenue lors de l'inscription.")
        return super().form_invalid(form)


# Vue de connexion
class CustomLoginView(LoginView):
    template_name = 'chat/login.html'
    redirect_authenticated_user = True

    def form_invalid(self, form):
        messages.error(self.request, "Nom d'utilisateur ou mot de passe incorrect.")
        return super().form_invalid(form)

    def get_success_url(self):
        return reverse_lazy('home')


# Vue de d√©connexion
class CustomLogoutView(LogoutView):
    next_page = 'login'


class HomeView(LoginRequiredMixin, TemplateView):
    template_name = 'chat/home.html'
    login_url = 'login'  # URL de redirection si l'utilisateur n'est pas connect√©
    redirect_field_name = 'next'  # Nom du param√®tre de requ√™te pour la redirection apr√®s connexion


### chat



import hashlib
import json
import asyncio
from django.views import View
from django.contrib.auth.mixins import LoginRequiredMixin
from django.http import JsonResponse
from django.shortcuts import render
from django.core.cache import cache
from concurrent.futures import ThreadPoolExecutor
from .models import Conversation, MessageIA, FicheConsultation
from asgiref.sync import sync_to_async

from django.views.generic.edit import CreateView
from django.urls import reverse_lazy
from django.http import StreamingHttpResponse

from langchain.schema import HumanMessage
from .llm_config import gpt4, claude, gemini, synthese_llm

def stream_synthese(synthese_llm, synthese_message):
    """G√©n√©rateur qui yield les tokens au fur et √† mesure via Langchain streaming."""
    for chunk in synthese_llm.stream([synthese_message]):
        # chaque chunk est un ChatMessage dans Langchain
        if hasattr(chunk, 'content'):
            yield chunk.content

class AnalyseSymptomesView(LoginRequiredMixin, View):
    template_name = "chat/home.html"

    def get(self, request):
        texte = ""
        symptomes_json = request.session.pop("symptomes_diagnostic", None)
        if symptomes_json:
            try:
                symptomes_dict = json.loads(symptomes_json)
                texte = formater_symptomes_en_texte(symptomes_dict)
            except (json.JSONDecodeError, TypeError) as e:
                print("Erreur lors du d√©codage des sympt√¥mes :", e)

        user = request.user
        conversations = Conversation.objects.filter(user=user).order_by('id')

        chat_items = []
        for conv in conversations:
            messages = MessageIA.objects.filter(
                conversation=conv, role__in=['user', 'synthese']
            ).order_by('id')
            if messages.exists():
                chat_items.append({
                    "conversation": conv,
                    "messages": messages
                })

        context = {
            "symptomes_texte": texte,
            "chat_items": chat_items
        }
        return render(request, self.template_name, context)

    def post(self, request):
        data = json.loads(request.body)
        symptomes = data.get("message")
        hash_key = hashlib.md5(symptomes.encode("utf-8")).hexdigest()
        cache_key = f"diagnostic_{hash_key}"
        cached_result = cache.get(cache_key)
        if cached_result:
            return JsonResponse({"response": cached_result})

        message = HumanMessage(content=f"""
            Sympt√¥mes du patient : {symptomes}
            Veuillez pr√©ciser :
            1. Analyses n√©cessaires
            2. Diagnostic(s)
            3. Traitement(s) avec posologie
            4. √âducation th√©rapeutique
            5. R√©f√©rences scientifiques fiables
            6. R√©pondre ensuite comme assistant m√©dical rigoureux et bienveillant.
        """)

        conversation = Conversation.objects.create(user=request.user)
        MessageIA.objects.create(conversation=conversation, role='user', content=symptomes)

        results = {}
        try:
            results["gpt4"] = gpt4.invoke([message]).content
        except Exception as e:
            results["gpt4"] = f"Erreur avec GPT-4 : {e}"

        try:
            results["claude"] = claude.invoke([message]).content
        except Exception as e:
            results["claude"] = f"Erreur avec Claude : {e}"

        try:
            results["gemini"] = gemini.invoke([message]).content
        except Exception as e:
            results["gemini"] = f"Erreur avec Gemini : {e}"

        for model, content in results.items():
            MessageIA.objects.create(conversation=conversation, role=model, content=content)

        synthese_message = HumanMessage(content=f"""
            Trois experts ont donn√© leur avis :
            - ü§ñ GPT-4 : {results['gpt4']}
            - üß† Claude 3 : {results['claude']}
            - üî¨ Gemini Pro : {results['gemini']}
            Formule une **synth√®se claire, rigoureuse et prudente**, avec des **emojis** pour la lisibilit√©. ü©∫
            Si le patient pose des questions, r√©ponds comme un assistant m√©dical qualifi√©.
        """)

        def token_stream():
            full_response = ""
            for chunk in stream_synthese(synthese_llm, synthese_message):
                yield chunk
                full_response += chunk
            cache.set(cache_key, full_response, timeout=3600)
            MessageIA.objects.create(conversation=conversation, role='synthese', content=full_response)

        return StreamingHttpResponse(token_stream(), content_type='text/plain; charset=utf-8')


def formater_symptomes_en_texte(symptomes: dict) -> str:
    # Informations personnelles
    nom = symptomes["Identification"]["Nom complet"]
    age = symptomes["Identification"]["√Çge"]
    date_naissance = symptomes["Identification"]["Date de naissance"]
    telephone = symptomes["Identification"]["T√©l√©phone"]

    texte = f"Je m'appelle {nom}, j'ai {age} ans (n√© le {date_naissance}), mon num√©ro de t√©l√©phone est {telephone}. Voici toutes mes informations m√©dicales. J'ai besoin d'un diagnostic bas√© sur les d√©tails suivants :\n\n"

    texte += f"Motif de consultation : {symptomes.get('Motif de consultation', '')}\n"
    texte += f"Histoire de la maladie : {symptomes.get('Histoire de la maladie', '')}\n\n"

    texte += "Plaintes :\n"
    for k, v in symptomes.get("Plaintes", {}).items():
        texte += f"- {k} : {'Oui' if v else 'Non'}\n"

    texte += "\nSignes vitaux :\n"
    for k, v in symptomes.get("Signes vitaux", {}).items():
        texte += f"- {k} : {v}\n"

    texte += "\nAnt√©c√©dents personnels :\n"
    for k, v in symptomes.get("Ant√©c√©dents personnels", {}).items():
        texte += f"- {k} : {'Oui' if v else 'Non'}\n"

    texte += "\nAnt√©c√©dents familiaux :\n"
    for k, v in symptomes.get("Ant√©c√©dents familiaux", {}).items():
        texte += f"- {k} : {'Oui' if v else 'Non'}\n"

    texte += "\nMode de vie :\n"
    for k, v in symptomes.get("Mode de vie", {}).items():
        texte += f"- {k} : {v}\n"

    texte += "\nAllergies :\n"
    for k, v in symptomes.get("Allergies", {}).items():
        texte += f"- {k} : {v}\n"

    texte += "\nTraumatismes :\n"
    for k, v in symptomes.get("Traumatismes", {}).items():
        texte += f"- {k} : {v}\n"

    texte += "\nCapacit√©s :\n"
    for k, v in symptomes.get("Capacit√©s", {}).items():
        texte += f"- {k} : {v}\n"

    texte += "\nExamen clinique :\n"
    for k, v in symptomes.get("Examen clinique", {}).items():
        texte += f"- {k} : {v}\n"

    texte += "\n√âvaluation psychosociale :\n"
    for k, v in symptomes.get("√âvaluation psychosociale", {}).items():
        texte += f"- {k} : {v}\n"

    return texte


class FicheConsultationCreateView(LoginRequiredMixin, CreateView):
    model = FicheConsultation
    form_class = FicheConsultationForm
    template_name = "chat/fiche_form.html"
    success_url = reverse_lazy('home')

    def form_valid(self, form):
        print("Formulaire valide :", form.cleaned_data)
        fiche = form.save(commit=False)
        fiche.conversation = Conversation.objects.create(user=self.request.user)
        fiche.save()

        # Construction du dictionnaire des sympt√¥mes
        symptomes = {
            "Identification": {
                "Nom complet": fiche.nom,
                "√Çge": fiche.age,
                "Date de naissance": fiche.date_naissance,
                "T√©l√©phone": fiche.telephone,
                "√âtat civil": fiche.etat_civil,
                "Occupation": fiche.occupation,
                "Adresse": {
                    "Avenue": fiche.avenue,
                    "Quartier": fiche.quartier,
                    "Commune": fiche.commune,
                },
                "Contact d'urgence": {
                    "Nom": fiche.contact_nom,
                    "T√©l√©phone": fiche.contact_telephone,
                    "Adresse": fiche.contact_adresse,
                },
            },
            "Motif de consultation": fiche.motif_consultation,
            "Histoire de la maladie": fiche.histoire_maladie,
            "Plaintes": {
                "C√©phal√©es": fiche.cephalees,
                "Vertiges": fiche.vertiges,
                "Palpitations": fiche.palpitations,
                "Troubles visuels": fiche.troubles_visuels,
                "Nycturie": fiche.nycturie,
            },
            "Signes vitaux": {
                "Temp√©rature": fiche.temperature,
                "SpO2": fiche.spo2,
                "Tension art√©rielle": fiche.tension_arterielle,
                "Pouls": fiche.pouls,
                "Fr√©quence respiratoire": fiche.frequence_respiratoire,
                "Poids": fiche.poids,
            },
            "Ant√©c√©dents personnels": {
                "Hypertension": fiche.hypertendu,
                "Diab√®te": fiche.diabetique,
                "√âpilepsie": fiche.epileptique,
                "Troubles du comportement": fiche.trouble_comportement,
                "Gastrite": fiche.gastritique,
                "Autres ant√©c√©dents": fiche.autres_antecedents,
            },
            "Ant√©c√©dents familiaux": {
                "Dr√©panocytose": fiche.familial_drepanocytaire,
                "Diab√®te": fiche.familial_diabetique,
                "Ob√©sit√©": fiche.familial_obese,
                "Hypertension": fiche.familial_hypertendu,
                "Troubles du comportement": fiche.familial_trouble_comportement,
                "Lien avec la m√®re": fiche.lien_mere,
                "Lien avec le p√®re": fiche.lien_pere,
                "Lien avec le fr√®re": fiche.lien_frere,
                "Lien avec la s≈ìur": fiche.lien_soeur,
            },
            "Mode de vie": {
                "Tabac": fiche.tabac,
                "Alcool": fiche.alcool,
                "Activit√© physique": fiche.activite_physique,
                "D√©tail de l'activit√© physique": fiche.activite_physique_detail,
                "Alimentation habituelle": fiche.alimentation_habituelle,
            },
            "Allergies": {
                "Allergie m√©dicamenteuse": fiche.allergie_medicamenteuse,
                "Nom du m√©dicament allerg√®ne": fiche.medicament_allergique,
            },
            "Traumatismes": {
                "√âv√©nement traumatique": fiche.evenement_traumatique,
                "Traumatisme li√© au d√©c√®s d‚Äôun enfant": fiche.trauma_deces_enfant,
                "√âtat g√©n√©ral": fiche.etat_general,
            },
            "Capacit√©s": {
                "Capacit√© physique": fiche.capacite_physique,
                "Score physique": fiche.capacite_physique_score,
                "Capacit√© psychologique": fiche.capacite_psychologique,
                "Score psychologique": fiche.capacite_psychologique_score,
            },
            "Examen clinique": {
                "√âtat g√©n√©ral": fiche.etat,
                "Fi√®vre": fiche.febrile,
                "Coloration bulbaire": fiche.coloration_bulbaire,
                "Coloration palp√©brale": fiche.coloration_palpebrale,
                "T√©guments": fiche.tegument,
                "T√™te": fiche.tete,
                "Cou": fiche.cou,
                "Paroi thoracique": fiche.paroi_thoracique,
                "Poumons": fiche.poumons,
                "C≈ìur": fiche.coeur,
                "√âpigastre et hypochondres": fiche.epigastre_hypochondres,
                "P√©ri-ombilical et flancs": fiche.peri_ombilical_flancs,
                "Hypogastre et fosses iliaques": fiche.hypogastre_fosses_iliaques,
                "Membres": fiche.membres,
                "Colonne et bassin": fiche.colonne_bassin,
                "Examen gyn√©cologique": fiche.examen_gynecologique,
            },
            "√âvaluation psychosociale": {
                "Pr√©occupations": fiche.preoccupations,
                "Compr√©hension": fiche.comprehension,
                "Attentes": fiche.attentes,
                "Engagement": fiche.engagement,
            }
        }

        def default_serializer(obj):
            if isinstance(obj, (datetime.date, datetime.datetime)):
                return obj.isoformat()
            raise TypeError(f"Type {type(obj)} non s√©rialisable")

        self.request.session["symptomes_diagnostic"] = json.dumps(symptomes, default=default_serializer)

        return redirect("analyse")

class ChatHistoryView(LoginRequiredMixin, TemplateView):
    template_name = "chat/history.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user = self.request.user
        # On r√©cup√®re toutes les conversations de ce user
        conversations = Conversation.objects.filter(user=user).order_by('-id')

        # Pour chaque conversation, on r√©cup√®re les messages utiles
        chat_items = []
        for conv in conversations:
            # On r√©cup√®re que les messages 'user' et 'synthese' dans l'ordre d'envoi
            messages = (
                MessageIA.objects
                    .filter(conversation=conv, role__in=['user', 'synthese'])
                    .order_by('id')
            )
            if messages.exists():
                chat_items.append({
                    "conversation": conv,
                    "messages": messages
                })

        context['chat_items'] = chat_items
        return context